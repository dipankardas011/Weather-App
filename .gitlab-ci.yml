# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - test
  - build
  - validate
  - deploy

include:
  - template: Terraform/Base.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml   # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml


variables:
  TF_ROOT: terraform/
  TF_STATE_NAME: default
  TF_CACHE_KEY: default

docker-build:
  stage: test
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build . --file Dockerfile --tag dipugodocker/weatherapp:$(date +%s)


unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  needs:
  - docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm -d -p 8081:80 dipugodocker/weatherapp:v3
    - echo "Nice"


lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  needs:
    - docker-build
  script:
    # TODO: TO be filled
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."


docker-push:       # This job runs in the build stage, which runs first.
  stage: build
  needs:
    - unit-test-job
    - lint-test-job
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u dipugodocker -p "$DOCKER_PASS"
  script:
    - docker build . --file Dockerfile --tag dipugodocker/weatherapp:v3
    - docker push dipugodocker/weatherapp:v3


terraform-validate:
  stage: validate
  extends: .terraform:validate



deploy-job:      # This job runs in the deploy stage.
  needs:
    - docker-push
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application started deployment to AzUrE Web app"


terraform-fmt:
  stage: deploy
  extends: .terraform:fmt
  needs:
    - deploy-job